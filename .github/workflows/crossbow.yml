# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.


# NOTE: must set "Crossbow" as name to have the badge links working in the
# github comment reports!
name: Crossbow
on:
  push:
    branches:
      - "*-github-*"

env:
  ARCHERY_DEBUG: 1


jobs:
  build:
    name: "Build wheel for manylinux 2-28"
    runs-on: ["self-hosted", "Linux", "arm64"]
    env:
      # archery uses these environment variables
      ARCH: arm64v8
      PYTHON: "3.13"
      PYTHON_ABI_TAG: "cp313"
      PYTHON_IMAGE_TAG: "3.13-rc"

    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          path: arrow
          repository: sandeepgupta12/arrow
          ref: 45b36976a31a4f363c0c471c2da1abd5bee97fd2
          submodules: recursive

      - name: Set up Python by actions/setup-python
        if: |
          !(runner.os == 'Linux' && runner.arch != 'X64')
        uses: actions/setup-python@v4
        with:
          cache: 'pip'
          python-version: 3.12
      - name: Set up Python by apt
        if: runner.os == 'Linux' && runner.arch != 'X64'
        run: |
          sudo apt update
          sudo apt-get install -y python3-pip
          pip install -U pip
          echo "$HOME/.local/bin" >>"$GITHUB_PATH"
      - name: Install Archery
        shell: bash
        run: pip install -e arrow/dev/archery[all]

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}


      - name: Build wheel
        shell: bash
        run: archery docker run -e SETUPTOOLS_SCM_PRETEND_VERSION=18.0.0.dev451 python-wheel-manylinux-2-28

      - uses: actions/upload-artifact@v4
        with:
          name: wheel
          path: arrow/python/repaired_wheels/*.whl

      # TODO(kszucs): auditwheel show
      - name: Test wheel
        if: |
          'cp313' != 'cp313t'
        shell: bash
        run: |
          source arrow/ci/scripts/util_enable_core_dumps.sh
          archery docker run python-wheel-manylinux-test-imports
          archery docker run python-wheel-manylinux-test-unittests

      # Free-threaded wheels need to be tested using a different docker-compose service
      - name: Test free-threaded wheel
        if: |
          'cp313' == 'cp313t'
        shell: bash
        run: |
          source arrow/ci/scripts/util_enable_core_dumps.sh
          archery docker run python-free-threaded-wheel-manylinux-test-imports
          archery docker run python-free-threaded-wheel-manylinux-test-unittests

      - name: Test wheel on AlmaLinux 8
        shell: bash
        if: |
          '3.13' == '3.9'
        env:
          ALMALINUX: "8"
        run: |
          archery docker run \
            -e ARROW_GANDIVA=OFF \
            -e TEST_DEFAULT=0 \
            -e TEST_PYARROW_VERSION=18.0.0.dev451 \
            -e TEST_PYTHON_VERSIONS=3.13 \
            -e TEST_WHEEL_PLATFORM_TAGS=manylinux_2_28_aarch64 \
            -e TEST_WHEELS=1 \
            almalinux-verify-rc

      - name: Test wheel on Ubuntu 20.04
        shell: bash
        if: |
          '3.13' == '3.9'
        env:
          UBUNTU: "20.04"
        run: |
          archery docker run \
            -e TEST_DEFAULT=0 \
            -e TEST_PYARROW_VERSION=18.0.0.dev451 \
            -e TEST_PYTHON_VERSIONS=3.13 \
            -e TEST_WHEEL_PLATFORM_TAGS=manylinux_2_28_aarch64 \
            -e TEST_WHEELS=1 \
            ubuntu-verify-rc

      - name: Test wheel on Ubuntu 22.04
        shell: bash
        if: |
          '3.13' == '3.10'
        env:
          UBUNTU: "22.04"
        run: |
          archery docker run \
            -e TEST_DEFAULT=0 \
            -e TEST_PYARROW_VERSION=18.0.0.dev451 \
            -e TEST_PYTHON_VERSIONS=3.13 \
            -e TEST_WHEEL_PLATFORM_TAGS=manylinux_2_28_aarch64 \
            -e TEST_WHEELS=1 \
            ubuntu-verify-rc

      - name: Set up Python by actions/setup-python
        if: |
          !(runner.os == 'Linux' && runner.arch != 'X64')
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      - name: Set up Python by apt
        if: runner.os == 'Linux' && runner.arch != 'X64'
        run: |
          sudo apt update
          sudo apt install -y \
            libgit2-dev \
            libpython3-dev \
            python3-pip
          sudo python3 -m pip install --upgrade pip
      - name: Checkout Crossbow
        uses: actions/checkout@v4
        with:
          path: crossbow
          ref: build-9
      - name: Setup Crossbow
        shell: bash
        run: |
          python3 -m pip install -e arrow/dev/archery[crossbow]
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Upload artifacts
        shell: bash
        run: |
          archery crossbow \
            --queue-path $(pwd)/crossbow \
            --queue-remote https://github.com/sandeepgupta12/crossbow \
            upload-artifacts \
            --sha build-9-github-wheel-manylinux-2-28-cp313-cp313-arm64 \
            --tag build-9-github-wheel-manylinux-2-28-cp313-cp313-arm64 \
            "arrow/python/repaired_wheels/*.whl"
        env:
          CROSSBOW_GITHUB_TOKEN: ${{ secrets.CROSSBOW_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
      - name: Verify uploaded artifacts
        shell: bash
        run: |
          archery crossbow \
            --queue-path $(pwd)/crossbow \
            --queue-remote https://github.com/sandeepgupta12/crossbow \
            status \
            --task-filter 'wheel-manylinux-2-28-cp313-cp313-arm64' \
            --no-fetch \
            --validate \
            build-9
        env:
          CROSSBOW_GITHUB_TOKEN: ${{ secrets.CROSSBOW_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up Ruby by apt
        if: runner.os == 'Linux' && runner.arch != 'X64'
        run: |
          sudo apt update
          sudo apt install -y ruby-full
      - name: Set up Ruby by GitHub Actions
        if: runner.arch == 'X64' && runner.os != 'macOS'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "ruby"
      - name: Install gemfury client on ARM self-hosted
        if: runner.arch != 'X64'
        run: |
          # GH-36692: Pin gemfury due to wrong faraday dependency declaration.
          gem install --user-install gemfury -v 0.12.0
          ruby -r rubygems -e 'puts("#{Gem.user_dir}/bin")' >> $GITHUB_PATH
      - name: Install gemfury client
        if: runner.arch == 'X64'
        run: |
          # GH-36692: Pin gemfury due to wrong faraday dependency declaration.
          gem install gemfury -v 0.12.0
      - name: Upload package to Gemfury
        shell: bash
        run: |
          if $(fury versions --as=${CROSSBOW_GEMFURY_ORG} --api-token=${CROSSBOW_GEMFURY_TOKEN} pyarrow | grep --fixed-strings -q "18.0.0.dev451"); then
            echo "Version 18.0.0.dev451 already exists. Avoid pushing version."
          else
            fury push \
              --api-token=${CROSSBOW_GEMFURY_TOKEN} \
              --as=${CROSSBOW_GEMFURY_ORG} \
              arrow/python/repaired_wheels/*.whl
          fi
        env:
          CROSSBOW_GEMFURY_TOKEN: ${{ secrets.CROSSBOW_GEMFURY_TOKEN }}
          CROSSBOW_GEMFURY_ORG: ${{ secrets.CROSSBOW_GEMFURY_ORG }}

      - name: Upload wheel to Anaconda scientific-python
        shell: bash
        run: |
          python3 -m pip install git+https://github.com/Anaconda-Platform/anaconda-client.git@1.12.3
          anaconda -t ${CROSSBOW_SCIENTIFIC_PYTHON_UPLOAD_TOKEN} upload --force -u scientific-python-nightly-wheels --label main arrow/python/repaired_wheels/*.whl
        env:
          CROSSBOW_SCIENTIFIC_PYTHON_UPLOAD_TOKEN: ${{ secrets.CROSSBOW_SCIENTIFIC_PYTHON_UPLOAD_TOKEN }}


      - name: Push Docker Image
        shell: bash
        run: |
          archery docker push python-wheel-manylinux-2-28
          archery docker push python-wheel-manylinux-test-unittests
